input {
  stdin { }  # Assuming you are inputting the JSON via stdin, adjust based on your actual input method.
}

filter {
  json {
    source => "message"  # The source of the JSON message. Adjust based on your field name if different.
  }

  # Extract resource attributes
  if [resource][attributes] {
    mutate {
      add_field => {
        "service_name" => "%{[resource][attributes][0][value][stringValue]}"
      }
    }
  }

  # Extract scopeLogs and logRecords fields
  if [scopeLogs][0][logRecords][0] {
    mutate {
      add_field => {
        "trace_id"           => "%{[scopeLogs][0][logRecords][0][traceId]}"
        "span_id"            => "%{[scopeLogs][0][logRecords][0][spanId]}"
        "severity_text"      => "%{[scopeLogs][0][logRecords][0][severityText]}"
        "observed_time"      => "%{[scopeLogs][0][logRecords][0][observedTimeUnixNano]}"
        "log_time"           => "%{[scopeLogs][0][logRecords][0][timeUnixNano]}"
        "severity_number"    => "%{[scopeLogs][0][logRecords][0][severityNumber]}"
        "log_body"           => "%{[scopeLogs][0][logRecords][0][body][stringValue]}"
      }
    }

    # Dynamically parse the attributes array
    ruby {
      code => '
        attributes = event.get("[scopeLogs][0][logRecords][0][attributes]")
        if attributes.is_a?(Array)
          attributes.each do |attribute|
            key = attribute["key"]
            value = attribute["value"].values.first
            event.set(key, value)
          end
        end
      '
    }
  }
}

output {
  stdout {
    codec => rubydebug  # This outputs the parsed fields to the console in a human-readable format.
  }
}
